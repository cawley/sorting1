public class GoldbachConjecture1{
public static boolean i2sq(long a) {
    double sqT = Math.sqrt(a/2);
    return sqT == ((int)sqT);
} 
  public static int[] EratoSieve(int a){
     int[] b = new int[a];
        boolean prime[] = new boolean[a+1]; 
        for(int i=0; i < a ; i++){ 
            prime[i] = true; }
          
        for(int p = 2; p*p < a; p++) { 
            if(prime[p] == true) { 
                for(int i = p*p; i <= a; i += p) 
                    prime[i] = false; 
            } 
        } 
        for(int i = 2; i < a; i++) { 
            if(prime[i] == true){ 
              b[i] = i;
        }
        }    
    return b;
    }
  
  public static void main(String[] args){
 
    int[] primes = EratoSieve(10000);
    int result = 1;
    boolean a = true;
    
    while(a){
    result += 2;
 
    int j = 0;
    a = false;
    while (result >= primes[j]) {
        if(i2sq(result-primes[j])){
            a = true;
          System.out.println(result+2-primes[j+1]);
          break;
        }
        j++;
    }  
}
    } 
}
